{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst fetchPizzas = createAsyncThunk('pizza/fetchPizzasByIdStatus', async (_ref, thunkAPI) => {\n  let {\n    order,\n    sortPut,\n    category,\n    search,\n    currentPage\n  } = _ref;\n  const res = await axios.get(`https://63a4cc372a73744b00802459.mockapi.io/items?page=${currentPage}&limit=4${category}&sortBy=${sortPut}&order=${order}&${search}`);\n  if (res.data.length < 0) {\n    return thunkAPI.rejectWithValue({\n      data: [],\n      message: 'Пиц не найдено'\n    });\n  }\n  return thunkAPI.fulfillWithValue({\n    data: res.data,\n    message: 'запрос успешный'\n  });\n});\nconst initialState = {\n  pizzas: [],\n  status: 'pending',\n  message: 'ожидание запроса'\n};\nconst pizzaSlice = createSlice({\n  name: 'pizzas',\n  initialState,\n  reducers: {\n    setPizza(state, action) {\n      state.pizzas = fetchPizzas(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchPizzas.pending, state => {\n      // pending state doesn't det payload anyway ! That's ridiculous !\n      // state.pizzas = action.payload\n      state.message = 'ожидание запроса';\n      state.status = 'pending';\n    });\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n      state.pizzas = action.payload.data;\n      state.message = action.payload.message;\n      state.status = 'success';\n    });\n    builder.addCase(fetchPizzas.rejected, (state, action) => {\n      state.pizzas = [];\n      state.status = 'error';\n      state.message = action.payload.message;\n    });\n  }\n});\nexport { fetchPizzas };\nexport const {\n  setPizza\n} = pizzaSlice.actions;\nexport default pizzaSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPizzas","thunkAPI","order","sortPut","category","search","currentPage","res","get","data","length","rejectWithValue","message","fulfillWithValue","initialState","pizzas","status","pizzaSlice","name","reducers","setPizza","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/pavlo/Desktop/react-pizza-main/src/Redux/Slices/pizzaSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst fetchPizzas = createAsyncThunk('pizza/fetchPizzasByIdStatus',\n    async ({ order, sortPut, category, search, currentPage }, thunkAPI) => {\n\n        const res = await axios.get(`https://63a4cc372a73744b00802459.mockapi.io/items?page=${currentPage}&limit=4${category}&sortBy=${sortPut}&order=${order}&${search}`)\n\n        if (res.data.length < 0) {\n            return thunkAPI.rejectWithValue({ data: [], message: 'Пиц не найдено' })\n        }\n        return thunkAPI.fulfillWithValue({ data: res.data, message: 'запрос успешный' })\n    }\n)\n\nconst initialState = {\n    pizzas: [],\n    status: 'pending',\n    message: 'ожидание запроса'\n}\n\nconst pizzaSlice = createSlice({\n    name: 'pizzas',\n    initialState,\n    reducers: {\n        setPizza(state, action) {\n            state.pizzas = fetchPizzas(action.payload)\n        }\n    },\n    extraReducers: (builder) => {\n        // Add reducers for additional action types here, and handle loading state as needed\n        builder.addCase(fetchPizzas.pending, (state) => {\n            // pending state doesn't det payload anyway ! That's ridiculous !\n            // state.pizzas = action.payload\n            state.message = 'ожидание запроса'\n            state.status = 'pending'\n        });\n        builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n            state.pizzas = action.payload.data\n            state.message = action.payload.message\n            state.status = 'success'\n        });\n        builder.addCase(fetchPizzas.rejected, (state, action) => {\n            state.pizzas = []\n            state.status = 'error'\n            state.message = action.payload.message\n        });\n    },\n})\n\nexport { fetchPizzas }\nexport const { setPizza, } = pizzaSlice.actions\nexport default pizzaSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,6BAA6B,EAC9D,aAA0DG,QAAQ,KAAK;EAAA,IAAhE;IAAEC,KAAK;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAY,CAAC;EAEpD,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAE,0DAAyDF,WAAY,WAAUF,QAAS,WAAUD,OAAQ,UAASD,KAAM,IAAGG,MAAO,EAAC,CAAC;EAElK,IAAIE,GAAG,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,OAAOT,QAAQ,CAACU,eAAe,CAAC;MAAEF,IAAI,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAiB,CAAC,CAAC;EAC5E;EACA,OAAOX,QAAQ,CAACY,gBAAgB,CAAC;IAAEJ,IAAI,EAAEF,GAAG,CAACE,IAAI;IAAEG,OAAO,EAAE;EAAkB,CAAC,CAAC;AACpF,CAAC,CACJ;AAED,MAAME,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,SAAS;EACjBJ,OAAO,EAAE;AACb,CAAC;AAED,MAAMK,UAAU,GAAGpB,WAAW,CAAC;EAC3BqB,IAAI,EAAE,QAAQ;EACdJ,YAAY;EACZK,QAAQ,EAAE;IACNC,QAAQ,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpBD,KAAK,CAACN,MAAM,GAAGf,WAAW,CAACsB,MAAM,CAACC,OAAO,CAAC;IAC9C;EACJ,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,OAAO,CAAC1B,WAAW,CAAC2B,OAAO,EAAGN,KAAK,IAAK;MAC5C;MACA;MACAA,KAAK,CAACT,OAAO,GAAG,kBAAkB;MAClCS,KAAK,CAACL,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC;IACFS,OAAO,CAACC,OAAO,CAAC1B,WAAW,CAAC4B,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACN,MAAM,GAAGO,MAAM,CAACC,OAAO,CAACd,IAAI;MAClCY,KAAK,CAACT,OAAO,GAAGU,MAAM,CAACC,OAAO,CAACX,OAAO;MACtCS,KAAK,CAACL,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC;IACFS,OAAO,CAACC,OAAO,CAAC1B,WAAW,CAAC6B,QAAQ,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACN,MAAM,GAAG,EAAE;MACjBM,KAAK,CAACL,MAAM,GAAG,OAAO;MACtBK,KAAK,CAACT,OAAO,GAAGU,MAAM,CAACC,OAAO,CAACX,OAAO;IAC1C,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,SAASZ,WAAW;AACpB,OAAO,MAAM;EAAEoB;AAAU,CAAC,GAAGH,UAAU,CAACa,OAAO;AAC/C,eAAeb,UAAU,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}